<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MyLinkedList</title>
    <url>/2021/11/16/MyLinkedLlist/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkedNode</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        LinkedNode* next;</span><br><span class="line">        <span class="built_in">LinkedNode</span>(<span class="keyword">int</span> val) : <span class="built_in">val</span>(val),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        fakeh=<span class="keyword">new</span> <span class="built_in">LinkedNode</span>(<span class="number">0</span>);</span><br><span class="line">        _size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;=_size||index&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">auto</span> cur=fakeh-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(index--)</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addAtHead</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> newnode=<span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        newnode-&gt;next=fakeh-&gt;next;</span><br><span class="line">        fakeh-&gt;next=newnode;</span><br><span class="line">        ++_size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addAtTail</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> cur=fakeh;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> newnode=<span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        cur-&gt;next=newnode;</span><br><span class="line">        ++_size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;_size)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(index==_size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">addAtTail</span>(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">addAtHead</span>(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> newnode=<span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        <span class="keyword">auto</span> cur=fakeh;</span><br><span class="line">        <span class="keyword">while</span>(index--)&#123;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        newnode-&gt;next=cur-&gt;next;</span><br><span class="line">        cur-&gt;next=newnode;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;=_size||index&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">auto</span> cur=fakeh;</span><br><span class="line">        <span class="keyword">while</span> (index--)&#123;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> tp=cur-&gt;next;</span><br><span class="line">        cur-&gt;next=tp-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tp;</span><br><span class="line">        _size--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> k=fakeh;</span><br><span class="line">        <span class="keyword">while</span>(k-&gt;next!=<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;k-&gt;next-&gt;val&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            k=k-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _size;</span><br><span class="line">    LinkedNode *fakeh;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵求逆</title>
    <url>/2021/11/18/k/</url>
    <content><![CDATA[<h5 id="相关公式"><a href="#相关公式" class="headerlink" title="相关公式"></a>相关公式</h5><p><img src="/2021/11/18/k/k2.jpg"></p>
<p>需求得矩阵A的行列式det(A)，求出A的伴随矩阵，每个元素除以det(A)即求得逆矩阵</p>
<h5 id="求行列式"><a href="#求行列式" class="headerlink" title="求行列式"></a>求行列式</h5><p>求行列式的方法     <a href="%5Bhttps://yesyuel.github.io/2021/11/18/%E6%B1%82%E8%A1%8C%E5%88%97%E5%BC%8F/%5D(https://yesyuel.github.io/2021/11/18/%E6%B1%82%E8%A1%8C%E5%88%97%E5%BC%8F/)">https://yesyuel.github.io/2021/11….</a>      可将int类型改为double</p>
<h5 id="求逆"><a href="#求逆" class="headerlink" title="求逆"></a>求逆</h5><p>可将求伴随矩阵与求逆的过程合并</p>
<p>遍历矩阵A，求出每个元素的代数余子式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//rac函数求行列式, 它的声明为</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">rac</span><span class="params">(vector&lt;vector&lt;<span class="keyword">double</span>&gt; &gt; a)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">double</span>&gt; &gt; <span class="built_in">a</span>(n+<span class="number">1</span>,vector&lt;<span class="keyword">double</span>&gt;(n+<span class="number">1</span>));<span class="comment">//矩阵A</span></span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">double</span>&gt; &gt; <span class="built_in">rev</span>(n+<span class="number">1</span>,vector&lt;<span class="keyword">double</span>&gt;(n+<span class="number">1</span>));<span class="comment">//存储逆矩阵</span></span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">double</span>&gt; &gt; <span class="built_in">rc</span>(n,vector&lt;<span class="keyword">double</span>&gt;(n));<span class="comment">//A的子阵</span></span><br><span class="line">	<span class="keyword">double</span> xy;<span class="comment">//系数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//上两层循环遍历A, 求a[i][j]的余子式</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> te1=<span class="number">1</span>,te2=<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;++k)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">1</span>;m&lt;=n;++m)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//下两层循环取得子阵</span></span><br><span class="line">                    <span class="keyword">if</span>(k!=i&amp;&amp;m!=j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        rc[te1][te2]=a[k][m];<span class="comment">//存储子阵</span></span><br><span class="line">                        te1++;</span><br><span class="line">                        <span class="keyword">if</span>(te1==n)</span><br><span class="line">                        &#123;</span><br><span class="line">                            te2++;</span><br><span class="line">                            te1=<span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//求代数余子式</span></span><br><span class="line">            <span class="keyword">if</span>((j+i)%<span class="number">2</span>)	 xy=<span class="number">-1.0</span>;</span><br><span class="line">            <span class="keyword">else</span>  xy=<span class="number">1.0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//注意伴随矩阵以转置的顺序存储</span></span><br><span class="line">            rev[j][i]=xy*<span class="built_in">rac</span>(rc)/deta;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>最后，如果打印rev，如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2f &quot;</span>,rev[i][j]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可能会打出-0.00，如图</p>
<p><img src="/2021/11/18/k/k1.jpg"></p>
<p>这是由于浮点数精度导致，0是不在浮点数表示范围内的</p>
<p>把打印语句改为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rev[i][j]&lt;=<span class="number">0</span>&amp;&amp;(rev[i][j]+<span class="number">0.05</span>&gt;<span class="number">0</span>))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;0.00 &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2f &quot;</span>,rev[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>即可解决问题</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+github搭建个人博客 (Windows)</title>
    <url>/2021/11/16/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h4><p>搭建博客需要以下软件</p>
<p>Git <a href="https://git-scm.com/">git</a>  <a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">安装教程</a></p>
<p>Node.js <a href="https://nodejs.org/en/">nodejs</a>  <a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">安装教程</a></p>
<p>Notepad++ <a href="https://notepad-plus.en.softonic.com/">notepad++</a></p>
<p>压缩软件</p>
<p>下载链接、安装教程已附在后方，基本没有大问题。下面重点为hexo的安装和配</p>
<p>置。</p>
<h4 id="搭建github库"><a href="#搭建github库" class="headerlink" title="搭建github库"></a>搭建github库</h4><p>new新建仓库，注意仓库名为 github用户名.github.io</p>
<p>若github用户名为samual，则仓库名为 samual.github.io</p>
<p>勾选 Add a README file</p>
<h4 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h4><p>在任意文件夹下右键Git Bash Here, </p>
<p>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;github注册邮箱&quot;</span></span><br><span class="line"><span class="comment">#之后敲几次回车直到出现新的一行</span></span><br></pre></td></tr></table></figure>

<p>注意git命令行鼠标右键可进行复制粘贴</p>
<p>copy与paste</p>
<p>完成后进入C:\Users\用户名.ssh</p>
<p>注意自己电脑的用户名</p>
<p>打开.ssh文件，用notepad++编辑id_rsa.pub，完全复制其中的内容</p>
<p>打开github，在settings中找到SSH and GPG keys</p>
<p>新建SSH keys，title无所谓，将id_rsa.pub中的内容复制到key中</p>
<h4 id="在本地生成博客"><a href="#在本地生成博客" class="headerlink" title="在本地生成博客"></a>在本地生成博客</h4><p>在任意地方新建文件夹，在其中git bash;</p>
<p>输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line">hexo init <span class="comment">#这一步初始化，从其他地方拷贝文件到该文件夹内</span></span><br><span class="line">hexo s <span class="comment">#启动服务，访问git中出现的网址</span></span><br></pre></td></tr></table></figure>

<p>CTRL C 关闭本地服务器，网页无法访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果npm命令执行缓慢，可以使用淘宝镜像</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="comment">#之后所有的npm改为cnpm</span></span><br></pre></td></tr></table></figure>

<h4 id="网上生成博客"><a href="#网上生成博客" class="headerlink" title="网上生成博客"></a>网上生成博客</h4><p>在文件夹中找到_config.yml，用vscode或notepa++打开，在最下方找到deploy；</p>
<p>改为以下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: ssh://git@github.com:github用户名/github用户名.github.io.git</span><br><span class="line">  <span class="comment">#注意修改</span></span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<p>然后使用git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装工具</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g <span class="comment">#生成页面</span></span><br><span class="line">hexo d <span class="comment">#将本地内容上传到仓库</span></span><br></pre></td></tr></table></figure>

<h4 id="写、发布博客"><a href="#写、发布博客" class="headerlink" title="写、发布博客"></a>写、发布博客</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;博客名&quot;</span></span><br><span class="line"><span class="comment">#会在source\_posts文件夹下生成.md 文件</span></span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line"><span class="comment">#写好后发布</span></span><br></pre></td></tr></table></figure>

<h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a><strong>主题配置</strong></h4><p>如果不喜欢现在的主题可以去next官网或者GitHub上自行搜索。<a href="http://theme-next.iissnan.com/">next官网</a></p>
]]></content>
  </entry>
  <entry>
    <title>配置opencv-c++ opencv4</title>
    <url>/2021/11/17/vs2019%E9%85%8D%E7%BD%AEopencv-c-Windows/</url>
    <content><![CDATA[<h4 id="I-下载opencv"><a href="#I-下载opencv" class="headerlink" title="I 下载opencv"></a>I 下载opencv</h4><p>下载地址：<a href="https://opencv.org/">opencv</a></p>
<p>在releases中下载Windows版本</p>
<p>注意安装路径</p>
<img src="/2021/11/17/vs2019%E9%85%8D%E7%BD%AEopencv-c-Windows/k1.png" style="zoom: 49%;">

<h4 id="II-配置环境变量"><a href="#II-配置环境变量" class="headerlink" title="II 配置环境变量"></a>II 配置环境变量</h4><p>此电脑–&gt;属性–&gt;高级系统设置–&gt;环境变量</p>
<p>在系统变量中选择Path，编辑</p>
<img src="/2021/11/17/vs2019%E9%85%8D%E7%BD%AEopencv-c-Windows/k2.png" style="zoom:50%;">

<p>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#opencv文件中bin的路径</span></span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line">C:\Leon\opencv\build\x64\vc15\bin</span><br></pre></td></tr></table></figure>

<h4 id="III-vs2019相关配置"><a href="#III-vs2019相关配置" class="headerlink" title="III vs2019相关配置"></a>III vs2019相关配置</h4><h5 id="1-包含目录与库目录"><a href="#1-包含目录与库目录" class="headerlink" title="1.包含目录与库目录"></a>1.包含目录与库目录</h5><p>新建一个C++空项目，Debug切换到 X64；</p>
<p>点击view–&gt;other windows-&gt;property manager</p>
<img src="/2021/11/17/vs2019%E9%85%8D%E7%BD%AEopencv-c-Windows/k3.png" style="zoom: 60%;">

<p>右击Debug|x64，选择properties</p>
<p><img src="/2021/11/17/vs2019%E9%85%8D%E7%BD%AEopencv-c-Windows/vs2019%E9%85%8D%E7%BD%AEopencv-c-Windows%5Ck4.png"></p>
<p>在VC++ Directories中编辑Include Directories与Library Directories</p>
<img src="/2021/11/17/vs2019%E9%85%8D%E7%BD%AEopencv-c-Windows/k5.png" style="zoom:80%;">

<p>Include Directories 中添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意修改路径</span></span><br><span class="line">E:\leon\opencv\build\include</span><br><span class="line">E:\leon\opencv\build\include\opencv2</span><br></pre></td></tr></table></figure>

<p>Library Directories 中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\leon\opencv\build\x64\vc14\lib</span><br></pre></td></tr></table></figure>

<h5 id="2-链接器"><a href="#2-链接器" class="headerlink" title="2.链接器"></a>2.链接器</h5><p>Linker–&gt;Input–&gt;Additional Dependencies添加</p>
<p>opencv_world453d.lib</p>
<p><strong>注意453是版本号，其他版本请修改</strong></p>
<img src="/2021/11/17/vs2019%E9%85%8D%E7%BD%AEopencv-c-Windows/k6.png" style="zoom:80%;">

<h4 id="IV-测试"><a href="#IV-测试" class="headerlink" title="IV 测试"></a>IV 测试</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Mat img = <span class="built_in">imread</span>(<span class="string">&quot;C:\\opencvtest\\test01.png&quot;</span>);    <span class="comment">//引号内选一张自己计算机内的图片的路径</span></span><br><span class="line">	<span class="built_in">imshow</span>(<span class="string">&quot;success&quot;</span>, img);    <span class="comment">//打开一个窗口，显示图片</span></span><br><span class="line">	<span class="built_in">waitKey</span>(<span class="number">0</span>);    <span class="comment">//在键盘敲入字符前程序处于等待状态</span></span><br><span class="line">	<span class="built_in">destroyAllWindows</span>();    <span class="comment">//关闭所有窗口</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若成功显示图片则配置完成</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>反转链表</title>
    <url>/2021/11/19/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="反转链表I"><a href="#反转链表I" class="headerlink" title="反转链表I"></a>反转链表I</h4><p><a href="https://leetcode.com/problems/reverse-linked-list/">https://leetcodereverse-linked-list/</a></p>
<h5 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h5><p>pre与cur指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *pre=<span class="literal">nullptr</span>,*cur=head;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            ListNode* temp=cur-&gt;next;<span class="comment">//保存cur-&gt;next，因为它会被更改</span></span><br><span class="line">            cur-&gt;next=pre;</span><br><span class="line">            pre=cur;</span><br><span class="line">            cur=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;<span class="comment">//新的头节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rev</span>(head,<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">rev</span><span class="params">(ListNode* cur,ListNode* pre)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">nullptr</span>)	<span class="keyword">return</span> pre;</span><br><span class="line">        <span class="keyword">auto</span> temp=cur-&gt;next;</span><br><span class="line">        cur-&gt;next=pre;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rev</span>(temp,cur);<span class="comment">//相当于pre=cur;cur=temp;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="反转链表II"><a href="#反转链表II" class="headerlink" title="反转链表II"></a>反转链表II</h4><p><a href="https://leetcode.com/problems/reverse-linked-list-ii/">leetcode.com/problems…</a></p>
<h5 id="截断"><a href="#截断" class="headerlink" title="截断"></a>截断</h5><p>截断待反转的区域，将它反转再重新插入</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rev</span><span class="params">(ListNode *head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    	ListNode *cur=head,*pre=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            <span class="keyword">auto</span> tmp=cur-&gt;next;</span><br><span class="line">            cur-&gt;next=pre;</span><br><span class="line">            pre=cur;</span><br><span class="line">            cur=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(right==left)  <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *dummyHead=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummyHead-&gt;next=head;</span><br><span class="line">        ListNode *pre=dummyHead,*rtnode,*ltnode,*nex;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;left<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ltnode=pre-&gt;next;</span><br><span class="line">        rtnode=ltnode;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;right-left;++i)&#123;</span><br><span class="line">            rtnode=rtnode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        nex=rtnode-&gt;next;</span><br><span class="line">        <span class="comment">/*至此已获得四个需要的指针*/</span></span><br><span class="line">        <span class="comment">//截断</span></span><br><span class="line">		pre-&gt;next=<span class="literal">NULL</span>;rtnode-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//反转</span></span><br><span class="line">        <span class="built_in">rev</span>(ltnode);</span><br><span class="line">        <span class="comment">//插回</span></span><br><span class="line">        pre-&gt;next=rtnode;</span><br><span class="line">        ltnode-&gt;next=nex;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一次遍历</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left==right) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* dummyNode=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummyNode-&gt;next=head;</span><br><span class="line">        ListNode *cur,*Next,*pre=dummyNode;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;left<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur=pre-&gt;next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;right-left;++i)&#123;</span><br><span class="line">            Next=cur-&gt;next;</span><br><span class="line">            cur-&gt;next=Next-&gt;next;</span><br><span class="line">            Next-&gt;next=pre-&gt;next;</span><br><span class="line">            pre-&gt;next=Next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>数组：双指针</title>
    <url>/2021/11/17/%E6%95%B0%E7%BB%84%EF%BC%9A%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h5 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项</h5><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/">Leetcode链接</a></p>
<p>通过一个快指针和一个慢指针在一个for循环中完成删除</p>
<p>时间复杂度O(n)</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fa,slow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()==<span class="number">0</span>)   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(fa=<span class="number">1</span>;fa&lt;nums.<span class="built_in">size</span>();++fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fa]&gt;nums[slow])</span><br><span class="line">                nums[++slow]=nums[fa];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="比较含退格的字符串"><a href="#比较含退格的字符串" class="headerlink" title="比较含退格的字符串"></a>比较含退格的字符串</h5><p><a href="https://leetcode.com/problems/backspace-string-compare/">Leetcode链接</a></p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">backspaceCompare</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=s.<span class="built_in">size</span>()<span class="number">-1</span>,j=t.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> ns=<span class="number">0</span>,nt=<span class="number">0</span>;<span class="comment">//记录s与t中#的数量</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span>)<span class="comment">//从后向前消除s的#</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;#&#x27;</span>)   ns++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ns&gt;<span class="number">0</span>)    ns--;</span><br><span class="line">                <span class="keyword">else</span>    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span>)<span class="comment">//从后向前消除t的#</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t[j]==<span class="string">&#x27;#&#x27;</span>)   nt++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nt&gt;<span class="number">0</span>)    nt--;</span><br><span class="line">                <span class="keyword">else</span>    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span>||j&lt;<span class="number">0</span>)    <span class="keyword">break</span>;<span class="comment">//当某个字符串遍历完时退出</span></span><br><span class="line">        <span class="keyword">if</span>(s[i]!=t[j])  <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//在某处字符不同可判定不相等</span></span><br><span class="line">        i--;j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">-1</span>&amp;&amp;j==<span class="number">-1</span>)<span class="comment">//字符，长度均相等</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>此题用栈也可较容易地实现</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>数组：滑动窗口</title>
    <url>/2021/11/17/%E6%95%B0%E7%BB%84%EF%BC%9A%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    <content><![CDATA[<h5 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h5><p><a href="https://leetcode.com/problems/minimum-size-subarray-sum/">leetcode209</a></p>
<p>暴力解法 用两个for循环，时间复杂度O(n^2);</p>
<p>滑动窗口法：</p>
<p>​        用两个指针，形成一个范围，根据范围内数组元素的和进行指针的移动。</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min=<span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums.<span class="built_in">size</span>())<span class="comment">// i在前</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">            <span class="keyword">while</span>(target&lt;=sum)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> k=i-j+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(k&lt;min) min=k;</span><br><span class="line">                sum-=nums[j++];</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min!=<span class="number">1</span>&lt;&lt;<span class="number">30</span>) <span class="keyword">return</span> min;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="水果成篮"><a href="#水果成篮" class="headerlink" title="水果成篮"></a>水果成篮</h5><p><a href="https://leetcode.com/problems/fruit-into-baskets/">leetcode904</a></p>
<p>使用 unordered_map，在超过三个数时移动指针</p>
<p>或 multiple set</p>
<p>如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">totalFruit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; fruits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> fast=<span class="number">0</span>;fast&lt;fruits.<span class="built_in">size</span>();++fast)</span><br><span class="line">        &#123;</span><br><span class="line">            m[fruits[fast]]++;</span><br><span class="line">            <span class="keyword">while</span>(m.<span class="built_in">size</span>()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">                m[fruits[slow]]--;</span><br><span class="line">                <span class="keyword">if</span>(m[fruits[slow]]==<span class="number">0</span>)</span><br><span class="line">                    m.<span class="built_in">erase</span>(fruits[slow]);</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(ret&lt;fast-slow+<span class="number">1</span>)</span><br><span class="line">                ret=fast-slow+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>求行列式</title>
    <url>/2021/11/18/%E6%B1%82%E8%A1%8C%E5%88%97%E5%BC%8F/</url>
    <content><![CDATA[<p>代码中计算n阶行列式的方式：用深度优先搜索算法获取n个不同行不同列元素的乘积，</p>
<p>用一个函数确定奇偶排列，将它们相加。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断奇偶排列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">serh</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=j+<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">if</span>(a[j]&gt;a[i])</span><br><span class="line">                ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt%<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>深搜代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//深度优先搜索</span></span><br><span class="line"><span class="comment">//k存放数的乘积，book数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(row==n+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">serh</span>(order))</span><br><span class="line">            temp=<span class="number">1</span>;</span><br><span class="line">        sum+=temp*k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(book[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            order[row]=i;<span class="comment">//更新顺序</span></span><br><span class="line">            book[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(row+<span class="number">1</span>,k*a[row][i]);</span><br><span class="line">            book[i]=<span class="number">0</span>;<span class="comment">//取消标记</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> book[<span class="number">101</span>],sum,n;</span><br><span class="line"><span class="comment">//行列式</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">101</span>][<span class="number">101</span>],order[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">serh</span><span class="params">(<span class="keyword">int</span> a[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">            cin&gt;&gt;a[i][j];</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深度优先搜索</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(row==n+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">serh</span>(order))</span><br><span class="line">            temp=<span class="number">1</span>;</span><br><span class="line">        sum+=temp*k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(book[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            order[row]=i;</span><br><span class="line">            book[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(row+<span class="number">1</span>,k*a[row][i]);</span><br><span class="line">            book[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断奇偶排列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">serh</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=j+<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">if</span>(a[j]&gt;a[i])</span><br><span class="line">                ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt%<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>链表：虚拟头节点</title>
    <url>/2021/11/17/%E9%93%BE%E8%A1%A8%EF%BC%9A%E8%99%9A%E6%8B%9F%E5%A4%B4%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h5 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h5><p><a href="https://leetcode.com/problems/remove-linked-list-elements/">leetcode203https://leetcode.com/problems/r…</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链表结构体</span></span><br><span class="line">  Definition <span class="keyword">for</span> singly-linked list.</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">      <span class="keyword">int</span> val;</span><br><span class="line">      ListNode *next;</span><br><span class="line">      <span class="built_in">ListNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">      <span class="built_in">ListNode</span>(<span class="keyword">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">      <span class="built_in">ListNode</span>(<span class="keyword">int</span> x, ListNode *next) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(next) &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>若直接使用原始链表，删除头节点的操作与其他节点不同</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 删除头结点 </span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">NULL</span> &amp;&amp; head-&gt;val == val) &#123; <span class="comment">// 注意使用while</span></span><br><span class="line">            ListNode* tmp = head;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除非头结点</span></span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">NULL</span> &amp;&amp; cur-&gt;next!= <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;next-&gt;val == val) &#123;</span><br><span class="line">                ListNode* tmp = cur-&gt;next;</span><br><span class="line">                cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>使用虚拟头节点：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ListNode* dummyHead=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">dummyHead-&gt;next=head</span><br><span class="line"><span class="comment">//使原先的头节点失去特殊地位</span></span><br><span class="line"><span class="comment">//最后记得要返回dummyHead-&gt;next.</span></span><br></pre></td></tr></table></figure>

<p>代码为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode *dummyHead=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummyHead-&gt;next=head;</span><br><span class="line">        <span class="keyword">auto</span> vi=dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(vi-&gt;next!=<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vi-&gt;next-&gt;val==val)&#123;</span><br><span class="line">                <span class="keyword">auto</span> tmp=vi-&gt;next;</span><br><span class="line">                vi-&gt;next=tmp-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                vi=vi-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        head=dummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummyHead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
</search>
